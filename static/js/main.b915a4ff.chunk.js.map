{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoInfo","useState","buttonHandler","setButtonHandler","dispatch","useEffect","todoActions","className","id","completed","classNames","title","onClick","TodoList","filteration","filteredTodos","setFilteredTodos","downloadingTodos","setDownloadingTodos","includes","filtrationHandler","setTimeout","length","map","TodoFilter","selectedOption","setSelectedOption","input","setInput","selectHandler","event","target","value","filtrationAction","onSubmit","preventDefault","onChange","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","then","fetch","res","json","TodoModal","user","setUser","setTodo","loading","setLoading","selectedTodo","getUserFromServer","a","userId","selectedUser","href","email","name","App","getTodosFromServer","todosAction","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b915a4ff.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type QueryType = 'filtration/SET';\n\ntype Query = {\n  type: QueryType\n  query: string\n  status: string\n};\n\nexport const setQuery = (query: string, status: string): Query => ({\n  type: 'filtration/SET',\n  query,\n  status,\n});\n\nexport const actions = { setQuery };\n\ninterface State {\n  query: string,\n  status: string,\n}\n\ntype Action = Query;\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state: State = initialState, action: Action): State => {\n  if (action.type === 'filtration/SET') {\n    return {\n      query: action.query,\n      status: action.status,\n    };\n  }\n\n  return state;\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'currentTodos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'currentTodos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (state: State = [], action: Action): Todo[] => {\n  if (action.type === 'currentTodos/SET') {\n    return action.payload;\n  }\n\n  return state;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as todoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const [buttonHandler, setButtonHandler] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const todoButtonHandler = () => {\n    setButtonHandler(!buttonHandler);\n  };\n\n  const selectedTodoSaver = () => {\n    if (buttonHandler) {\n      dispatch(todoActions.setTodo(todo));\n    }\n\n    dispatch(todoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    selectedTodoSaver();\n  }, [buttonHandler]);\n\n  return (\n    <>\n      <tr data-cy=\"todo\">\n        <td className=\"is-vcentered\">{todo.id}</td>\n        <td className=\"is-vcentered\">\n          {todo.completed && (\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          )}\n        </td>\n\n        <td className=\"is-vcentered is-expanded\">\n          <p className={classNames(\n            { 'has-text-danger': !todo.completed },\n            { 'has-text-success': todo.completed },\n          )}\n          >\n            {todo.title}\n          </p>\n        </td>\n\n        <td className=\"has-text-right is-vcentered\">\n          <button\n            data-cy=\"selectButton\"\n            className=\"button\"\n            type=\"button\"\n            onClick={todoButtonHandler}\n          >\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        </td>\n      </tr>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(store => store.todos);\n  const filteration = useAppSelector(store => store.filter);\n  const [filteredTodos, setFilteredTodos] = useState(todos);\n  const [downloadingTodos, setDownloadingTodos] = useState(false);\n\n  const filtrationHandler = () => {\n    switch (filteration.status) {\n      case 'completed':\n        return todos.filter(todo => todo.completed)\n          .filter(todo => todo.title.includes(filteration.query));\n      case 'active':\n        return todos.filter(todo => !todo.completed)\n          .filter(todo => todo.title.includes(filteration.query));\n      default:\n        return todos.filter(todo => todo.title.includes(filteration.query));\n    }\n  };\n\n  useEffect(() => {\n    setFilteredTodos(filtrationHandler());\n  }, [filteration, todos]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setDownloadingTodos(true);\n    }, 500);\n  }, []);\n\n  return (\n    <>\n      {(filteredTodos.length === 0 && downloadingTodos) && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        {filteredTodos.length > 0 && (\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n        )}\n\n        <tbody>\n          {filteredTodos.map(todo => (\n            <TodoInfo todo={todo} key={todo.id} />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as filtrationAction } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const [selectedOption, setSelectedOption] = useState('all');\n  const [input, setInput] = useState('');\n  const dispatch = useAppDispatch();\n\n  const queryHandler = () => {\n    dispatch(filtrationAction.setQuery(input, selectedOption));\n  };\n\n  const selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.target.value);\n  };\n\n  const clearInputButton = () => {\n    setInput('');\n  };\n\n  useEffect(() => {\n    queryHandler();\n  }, [input, selectHandler]);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={selectHandler}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={input}\n          onChange={inputHandler}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {input && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearInputButton}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User>();\n  const [todo, setTodo] = useState<Todo | null>();\n  const [loading, setLoading] = useState(true);\n\n  const selectedTodo = useAppSelector(store => store.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const getUserFromServer = async () => {\n    let selectedUser;\n\n    if (selectedTodo) {\n      selectedUser = await getUser(selectedTodo?.userId);\n    }\n\n    setUser(selectedUser);\n  };\n\n  const buttonHandler = () => {\n    if (selectedTodo) {\n      dispatch(actions.removeTodo());\n    }\n\n    setTodo(null);\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n    setTodo(selectedTodo);\n\n    if (selectedTodo) {\n      setLoading(true);\n    }\n  }, [selectedTodo]);\n\n  useEffect(() => {\n    if (loading) {\n      setTimeout(() => {\n        setLoading(false);\n      }, 300);\n    }\n  }, [loading]);\n\n  return (\n    <>\n      {todo && (\n        <div className=\"modal is-active\" data-cy=\"modal\">\n          <div className=\"modal-background\" />\n\n          {loading && (<Loader />)}\n\n          {!loading && (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${selectedTodo?.id}`}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={buttonHandler}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {selectedTodo?.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {selectedTodo?.completed ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n                  {' by '}\n                  <a href={user?.email}>{user?.name}</a>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { actions as todosAction } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(store => store.currentTodo);\n\n  const getTodosFromServer = async () => {\n    const todos: Todo[] = await getTodos();\n\n    dispatch(todosAction.setTodos(todos));\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading && (<Loader />)}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}